generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                                        @id @default(uuid())
  userHashPublic                String
  name                          String
  email                         String                                        @unique
  password                      String?
  isDeactivated                 Boolean                                       @default(false)
  isUploadAvatar                Boolean                                       @default(false)
  verificationTokenEmail        Boolean                                       @default(false)
  validatorLocation             Boolean                                       @default(false)
  createdAt                     DateTime                                      @default(now())
  updatedAt                     DateTime                                      @updatedAt
  matchId                       String?
  avatar                        AvatarCloudinary?
  PostMessageCloudinary         PostMessageCloudinary[]
  About                         AboutMe?
  CompleteData                  CompleteData[]
  LikePostMessage               LikePostMessage[]
  initiatedMatches              Match[]                                       @relation("Initiator")
  receivedMatches               Match[]                                       @relation("Recipient")
  Message                       Message[]
  RewardTracking                RewardTracking[]
  Match                         Match?                                        @relation(fields: [matchId], references: [id])
  UserLocation                  UserLocation?
  UnLikePostMessage             UnLikePostMessage[]
  CodeConfirmationEmail         CodeConfirmationEmail?
  DeviceInfo                    DeviceInfo?
  UserDescription               UserDescription?
  ReportProblem                 ReportProblem[]
  StripeSignature               StripeSignature[]
  ActivePlanGolFreeTrial        Boolean?
  SubscriptionPlanGoldFreeTrial ViewCardOrFirstPublicationPlanGoldFreeTrial[]
  UserStripeCustomersId         UserStripeCustomersId?
  OAuthUser                     OAuthUser?
  SubscriptionGoldFreeTrial     SubscriptionGoldFreeTrial?

  @@map("user")
}

model UserDescription {
  id          String @id @default(uuid())
  description String
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user-description")
}

model DeviceInfo {
  id                     String @id @default(cuid())
  operatingSystem        String
  operatingSystemVersion String
  deviceId               String
  deviceModel            String
  screenResolution       String
  appVersion             String
  ipAddress              String
  deviceLanguage         String
  networkConnection      String
  deviceTemperature      Float
  deviceRegion           String
  apiLevel               String
  userId                 String @unique
  user                   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) // Data de criação
  updatedAt DateTime @updatedAt // Data de atualização

  @@map("device-info")
}

model AvatarCloudinary {
  id            String   @id @default(cuid())
  userId        String   @unique
  image         String
  fileName      String
  format        String
  optimizedSize Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CodeConfirmationEmail {
  id               String @id @default(cuid())
  userId           String @unique
  codeConfirmation Int    @unique
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("code-confirmation-email")
}

model UserLocation {
  id          String @id @default(uuid())
  state       String
  stateCode   String
  city        String
  continent   String
  country     String
  countryCode String
  currency    String

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user-location")
}

model AboutMe {
  id          String   @id @default(uuid())
  dateOfBirth String
  gender      String
  interests   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("about-me")
}

model PostMessageCloudinary {
  id                  String              @id @default(uuid())
  image               String
  fileName            String
  typeExpirationTimer String
  expirationTimer     DateTime
  isExpired           Boolean             @default(false)
  optimizedSize       Int
  format              String
  userId              String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  LikePostMessage     LikePostMessage[]
  UnLikePostMessage   UnLikePostMessage[]
}

model CompleteData {
  id           String @id @default(uuid())
  address      String
  neighborhood String
  state        String
  city         String
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("complete-data")
}

model LikePostMessage {
  id                    String                 @id @default(uuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  postId                String?
  userId                String
  PostMessageCloudinary PostMessageCloudinary? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("like-post-message")
}

model UnLikePostMessage {
  id                    String                 @id @default(uuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  postId                String?
  userId                String
  PostMessageCloudinary PostMessageCloudinary? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("unlike-post-message")
}

model RewardTracking {
  id                   String  @id @default(uuid())
  userId               String  @unique
  mustWatchVideoReword Boolean @default(false)
  totalLikes           Int     @default(0)
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("reward_tracking")
}

model Match {
  id            String          @id @default(uuid())
  initiatorId   String
  recipientId   String
  unMatch       Boolean         @default(false)
  initiator     User            @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  recipient     User            @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  Message       Message[]
  User          User[]
  ReportProblem ReportProblem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([initiatorId, recipientId])
  @@map("match")
}

model Message {
  id      String @id @default(uuid())
  content String
  userId  String
  matchId String
  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("message")
}

model ReportProblem {
  id            String @id @default(uuid())
  userId        String
  matchId       String
  reportProblem String

  match Match @relation(fields: [matchId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeSignature {
  id                 String  @id @default(uuid())
  userId             String
  subscription       String  @unique
  priceId            String
  plan               String
  amountPaid         Decimal
  country            String?
  currency           String
  currentPeriodStart Int
  currentPeriodEnd   Int
  status             String // incomplete, incomplete_expired, trialing (teste gratuito), active, past_due, canceled, unpaid, paused
  cancelAtPeriodEnd  Boolean @default(false)
  cancelAt           Int?
  description        String
  interval           String?
  colorTop           String
  colorBottom        String
  intervalCount      Int

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stripe-signature")
}

model ViewCardOrFirstPublicationPlanGoldFreeTrial {
  id                          String   @id @default(uuid())
  userId                      String   @unique
  viewCardFreeTrial           Boolean? @default(false)
  firstPublicationPostMessage Boolean? @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubscriptionGoldFreeTrial {
  id     String @id @default(uuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscription-gold-free-trial")
}

model AdminActivePlanGoldFreeTrial {
  id         String  @id @default(uuid())
  activePlan Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("active-plan-gold-free-trial")
}

model UserStripeCustomersId {
  id         String @id @default(uuid())
  userId     String @unique
  customerId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user-stripe-customers-id")
}

model OAuthUser {
  id         String @id @default(uuid())
  sub        String // Exemplo: "google", "facebook"
  providerId String
  userId     String @unique
  picture    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("oauth-google")
}
