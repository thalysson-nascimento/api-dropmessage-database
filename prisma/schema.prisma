// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(uuid())
  userHashPublic         String
  name                   String
  email                  String            @unique()
  password               String
  isUploadAvatar         Boolean           @default(false)
  verificationTokenEmail Boolean           @default(false)
  validatorLocation      Boolean           @default(false)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  avatar                 Avatar?
  PostMessage            PostMessage[]
  CompleteData           CompleteData[]
  LikePostMessage        LikePostMessage[]
  initiatedMatches       Match[]           @relation("Initiator")
  receivedMatches        Match[]           @relation("Recipient")
  About                  AboutMe?
  UserLocation           UserLocation?
  Message                Message[]
  Match                  Match?            @relation(fields: [matchId], references: [id])
  matchId                String?

  @@map("user")
}

model Avatar {
  id        String   @id @default(uuid())
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique() // Adiciona a restrição de unicidade
  user      User     @relation(fields: [userId], references: [id])

  @@map("avatar")
}

model UserLocation {
  id        String   @id @default(uuid())
  state     String
  stateCode String
  city      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique() // Adiciona a restrição de unicidade
  user      User     @relation(fields: [userId], references: [id])

  @@map("user-location")
}

model AboutMe {
  id          String   @id @default(uuid())
  dateOfBirth String
  gender      String
  interests   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique() // Adiciona a restrição de unicidade
  user        User     @relation(fields: [userId], references: [id])

  @@map("about-me")
}

model PostMessage {
  id                  String            @id @default(uuid())
  image               String
  typeExpirationTimer String
  expirationTimer     DateTime
  createdAt           DateTime          @default(now())
  isExpired           Boolean           @default(false)
  updatedAt           DateTime          @updatedAt
  userId              String
  user                User              @relation(fields: [userId], references: [id])
  LikePostMessage     LikePostMessage[]

  @@map("post-message")
}

model CompleteData {
  id           String   @id @default(uuid())
  address      String
  neighborhood String
  state        String
  city         String
  createdAt    DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  @@map("complete-data")
}

model LikePostMessage {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  postId    String
  post      PostMessage @relation(fields: [postId], references: [id])
  userId    String
  user      User        @relation(fields: [userId], references: [id])

  @@unique([postId, userId]) // Evita curtidas duplicadas no mesmo post pelo mesmo usuário
  @@map("like-post-message")
}

model Match {
  id          String    @id @default(uuid())
  initiatorId String
  recipientId String
  unMatch     Boolean   @default(false)
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  recipient   User      @relation("Recipient", fields: [recipientId], references: [id])
  createdAt   DateTime  @default(now())
  Message     Message[]
  User        User[]

  @@unique([initiatorId, recipientId]) // Garante um match único entre os usuários
  @@map("match")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  matchId   String
  match     Match    @relation(fields: [matchId], references: [id]) // Relaciona mensagem ao Match

  @@map("message")
}
